// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pbgossip.proto

package pbgossipconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	pbgossip "github.com/rfratto/ckit/internal/pbgossip"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TransportName is the fully-qualified name of the Transport service.
	TransportName = "pbgossip.ckit.rfratto.v1.Transport"
)

// TransportClient is a client for the pbgossip.ckit.rfratto.v1.Transport service.
type TransportClient interface {
	SendPacket(context.Context, *connect_go.Request[pbgossip.Message]) (*connect_go.Response[emptypb.Empty], error)
	StreamPackets(context.Context) *connect_go.BidiStreamForClient[pbgossip.Message, pbgossip.Message]
}

// NewTransportClient constructs a client for the pbgossip.ckit.rfratto.v1.Transport service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransportClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TransportClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &transportClient{
		sendPacket: connect_go.NewClient[pbgossip.Message, emptypb.Empty](
			httpClient,
			baseURL+"/pbgossip.ckit.rfratto.v1.Transport/SendPacket",
			opts...,
		),
		streamPackets: connect_go.NewClient[pbgossip.Message, pbgossip.Message](
			httpClient,
			baseURL+"/pbgossip.ckit.rfratto.v1.Transport/StreamPackets",
			opts...,
		),
	}
}

// transportClient implements TransportClient.
type transportClient struct {
	sendPacket    *connect_go.Client[pbgossip.Message, emptypb.Empty]
	streamPackets *connect_go.Client[pbgossip.Message, pbgossip.Message]
}

// SendPacket calls pbgossip.ckit.rfratto.v1.Transport.SendPacket.
func (c *transportClient) SendPacket(ctx context.Context, req *connect_go.Request[pbgossip.Message]) (*connect_go.Response[emptypb.Empty], error) {
	return c.sendPacket.CallUnary(ctx, req)
}

// StreamPackets calls pbgossip.ckit.rfratto.v1.Transport.StreamPackets.
func (c *transportClient) StreamPackets(ctx context.Context) *connect_go.BidiStreamForClient[pbgossip.Message, pbgossip.Message] {
	return c.streamPackets.CallBidiStream(ctx)
}

// TransportHandler is an implementation of the pbgossip.ckit.rfratto.v1.Transport service.
type TransportHandler interface {
	SendPacket(context.Context, *connect_go.Request[pbgossip.Message]) (*connect_go.Response[emptypb.Empty], error)
	StreamPackets(context.Context, *connect_go.BidiStream[pbgossip.Message, pbgossip.Message]) error
}

// NewTransportHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransportHandler(svc TransportHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/pbgossip.ckit.rfratto.v1.Transport/SendPacket", connect_go.NewUnaryHandler(
		"/pbgossip.ckit.rfratto.v1.Transport/SendPacket",
		svc.SendPacket,
		opts...,
	))
	mux.Handle("/pbgossip.ckit.rfratto.v1.Transport/StreamPackets", connect_go.NewBidiStreamHandler(
		"/pbgossip.ckit.rfratto.v1.Transport/StreamPackets",
		svc.StreamPackets,
		opts...,
	))
	return "/pbgossip.ckit.rfratto.v1.Transport/", mux
}

// UnimplementedTransportHandler returns CodeUnimplemented from all methods.
type UnimplementedTransportHandler struct{}

func (UnimplementedTransportHandler) SendPacket(context.Context, *connect_go.Request[pbgossip.Message]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pbgossip.ckit.rfratto.v1.Transport.SendPacket is not implemented"))
}

func (UnimplementedTransportHandler) StreamPackets(context.Context, *connect_go.BidiStream[pbgossip.Message, pbgossip.Message]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pbgossip.ckit.rfratto.v1.Transport.StreamPackets is not implemented"))
}
